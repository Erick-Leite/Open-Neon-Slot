---
import { SITE_TITLE } from "consts";
import OpenNeonSlotLogo from "@assets/icons/logo/OpenNeonSlot.svg";
import { Image } from "astro:assets";
---

<div class="my-auto flex items-center justify-center p-4">
  <main class="mx-auto w-full max-w-3xl">
    <section
      class="rounded-2xl bg-gradient-to-br from-[#040405]/60 to-[#001219]/30 p-6 shadow-2xl ring-1 ring-white/5"
    >
      <header class="mb-4">
        <div class="mb-2 flex items-center justify-between gap-4">
          <div class="flex items-center gap-4">
            <Image
              src={OpenNeonSlotLogo}
              alt="M√°quina ca√ßa-n√≠quel digital com tr√™s diamantes azuis na tela, design neon com luzes coloridas, alavanca lateral e s√≠mbolos de c√≥digo aberto e gratuito"
              height={64}
              width={64}
            />
            <h1 class="text-2xl font-extrabold tracking-tight">
              {SITE_TITLE} ‚Äî Demo de Cassino
            </h1>
          </div>

          <div class="text-right">
            <div id="balance" class="text-lg font-semibold" aria-live="polite">
              R$ 1000
            </div>
            <div class="text-xs text-slate-300">Saldo</div>
          </div>
        </div>

        <p class="text-sm text-slate-300">
          Comece com R$1000 ‚Äî escolha sua aposta e dificuldade, depois gire at√©
          tr√™s vezes!
        </p>
      </header>

      <div class="mb-6 grid grid-cols-1 gap-4 md:grid-cols-3">
        <div class="space-y-1">
          <label for="betInput" class="text-xs text-slate-300">Aposta</label>
          <div class="flex gap-2">
            <input
              id="betInput"
              type="number"
              min="1"
              step="1"
              value="50"
              class="w-full rounded-lg border border-white/5 bg-[#0b1220] px-3 py-2 text-white"
              aria-label="Valor da aposta"
            />
            <select
              id="quickBet"
              class="rounded-lg border border-white/5 bg-[#0b1220] px-3 py-2"
              aria-label="Apostas r√°pidas"
            >
              <option value="10">R$10</option>
              <option value="25">R$25</option>
              <option value="50" selected>R$50</option>
              <option value="100">R$100</option>
            </select>
          </div>
        </div>

        <div class="space-y-1">
          <label for="difficulty" class="text-xs text-slate-300"
            >Dificuldade</label
          >
          <select
            id="difficulty"
            class="w-full rounded-lg border border-white/5 bg-[#0b1220] px-3 py-2"
            aria-label="Selecionar dificuldade"
          >
            <option value="easy">F√°cil</option>
            <option value="medium">M√©dio</option>
            <option value="normal" selected>Normal</option>
            <option value="hard">Dif√≠cil</option>
            <option value="extreme">Extremo</option>
          </select>
          <div id="diffHint" class="mt-1 text-xs text-slate-400">
            Normal: probabilidades balanceadas
          </div>
        </div>

        <div class="flex items-end justify-end">
          <div class="flex items-center gap-2">
            <div class="mr-3 text-right">
              <div
                id="roundChances"
                class="text-sm font-medium"
                aria-live="polite"
              >
                Chances: ‚Äî
              </div>
              <div class="text-xs text-slate-300">Por rodada</div>
            </div>
            <button
              id="spinBtn"
              class="spin-btn inline-flex transform items-center gap-2 rounded-2xl bg-gradient-to-r from-amber-400 to-orange-500 px-6 py-3 font-bold text-black shadow-lg active:scale-95"
              aria-pressed="false"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
                ><path
                  d="M3 10a7 7 0 117 7v-1a6 6 0 100-12H8l3 3-3 3h2a4 4 0 110 8 4 4 0 014-4h1a7 7 0 01-7 7A7 7 0 013 10z"
                ></path></svg
              >
              Girar
            </button>
          </div>
        </div>
      </div>

      <div
        class="slot-machine grid grid-cols-3 items-center justify-center gap-4 rounded-xl bg-[#061024]/60 p-6"
      >
        <div
          class="reel-container relative flex items-center justify-center rounded-lg border border-white/5 bg-[#071331] p-3 shadow-inner"
        >
          <div
            class="reel flex h-28 w-full flex-col items-center justify-center text-4xl font-bold"
            id="reel0"
            aria-hidden="true"
          >
          </div>
        </div>

        <div
          class="reel-container relative flex items-center justify-center rounded-lg border border-white/5 bg-[#071331] p-3 shadow-inner"
        >
          <div
            class="reel flex h-28 w-full flex-col items-center justify-center text-4xl font-bold"
            id="reel1"
            aria-hidden="true"
          >
          </div>
        </div>

        <div
          class="reel-container relative flex items-center justify-center rounded-lg border border-white/5 bg-[#071331] p-3 shadow-inner"
        >
          <div
            class="reel flex h-28 w-full flex-col items-center justify-center text-4xl font-bold"
            id="reel2"
            aria-hidden="true"
          >
          </div>
        </div>
      </div>

      <div class="mt-6 grid grid-cols-1 gap-4 md:grid-cols-2">
        <div class="rounded-lg border border-white/5 bg-[#07122a] p-4">
          <div
            id="message"
            class="text-sm leading-relaxed"
            role="status"
            aria-live="polite"
          >
            Escolha a aposta e a dificuldade, depois pressione <strong
              >Girar</strong
            >!
          </div>
        </div>

        <div class="rounded-lg border border-white/5 bg-[#07122a] p-4">
          <div class="mb-2 text-xs text-slate-300">
            Tabela de Pagamentos (exemplo)
          </div>
          <ul id="paytable" class="space-y-1 text-sm"></ul>
        </div>
      </div>
    </section>
  </main>
</div>

<style>
  @keyframes reel-spin {
    0% {
      transform: translateY(0);
      opacity: 1;
    }
    50% {
      transform: translateY(-40%);
      opacity: 0.9;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }

  .win-glow {
    box-shadow:
      0 0 20px rgba(250, 200, 60, 0.25),
      0 0 60px rgba(250, 150, 50, 0.12) inset;
    transform: translateY(-3px) scale(1.02);
    transition:
      transform 220ms ease,
      box-shadow 220ms ease;
  }

  .lose-tone {
    opacity: 0.9;
    transform: translateY(0);
    transition:
      transform 220ms ease,
      opacity 220ms ease;
  }

  .reel .symbol {
    display: inline-block;
    animation: bounceIn 400ms ease;
  }

  @keyframes bounceIn {
    0% {
      transform: translateY(-12px) scale(0.96);
      opacity: 0;
    }
    60% {
      transform: translateY(6px) scale(1.02);
      opacity: 1;
    }
    100% {
      transform: translateY(0) scale(1);
      opacity: 1;
    }
  }

  .spin-btn {
    transition:
      transform 120ms ease,
      box-shadow 120ms ease;
  }

  .spin-btn:hover {
    transform: translateY(-3px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.45);
  }

  .reel {
    font-size: 2.6rem;
    line-height: 1;
    text-shadow: 0 4px 18px rgba(0, 0, 0, 0.6);
  }

  @media (max-width: 640px) {
    .reel {
      font-size: 2.2rem;
    }
  }
</style>

<script>
  /* Tipos e constantes do jogo */
  type SymbolItem = {
    readonly id: string;
    readonly icon: string;
    readonly name: string;
    readonly multiplier: number;
    readonly frequency: number;
  };

  const SYMBOLS: readonly SymbolItem[] = [
    {
      id: "diamond",
      icon: "üíé",
      name: "Diamante",
      multiplier: 50,
      frequency: 2,
    },
    { id: "seven", icon: "7Ô∏è‚É£", name: "Sete", multiplier: 20, frequency: 3 },
    { id: "bar", icon: "üî∂", name: "Barra", multiplier: 10, frequency: 6 },
    { id: "bell", icon: "üîî", name: "Sino", multiplier: 6, frequency: 10 },
    { id: "cherry", icon: "üçí", name: "Cereja", multiplier: 3, frequency: 20 },
    { id: "lemon", icon: "üçã", name: "Lim√£o", multiplier: 2, frequency: 50 },
  ];

  type DifficultyLevel = "easy" | "medium" | "normal" | "hard" | "extreme";

  interface DifficultyConfiguration {
    readonly label: string;
    readonly weightFactor: number;
    readonly payoutFactor: number;
    readonly hint: string;
  }

  const DIFFICULTY_CONFIG: Record<DifficultyLevel, DifficultyConfiguration> = {
    easy: {
      label: "Easy",
      weightFactor: 1.6,
      payoutFactor: 0.9,
      hint: "Maior chance de ganhar, pagamentos menores.",
    },
    medium: {
      label: "Medium",
      weightFactor: 1.2,
      payoutFactor: 0.95,
      hint: "Ligeiramente mais f√°cil que Normal.",
    },
    normal: {
      label: "Normal",
      weightFactor: 1.0,
      payoutFactor: 1.0,
      hint: "Probabilidades e pagamentos balanceados.",
    },
    hard: {
      label: "Hard",
      weightFactor: 0.8,
      payoutFactor: 1.15,
      hint: "Ganhos mais dif√≠ceis, recompensas maiores.",
    },
    extreme: {
      label: "Extreme",
      weightFactor: 0.55,
      payoutFactor: 1.6,
      hint: "Vit√≥rias muito raras, pagamentos muito maiores.",
    },
  } as const;

  /* Estado do jogo */
  interface GameState {
    balance: number;
    spinning: boolean;
    roundActive: boolean;
    chancesLeft: number;
  }

  const INITIAL_ROUND_CHANCES = 3;

  const state: GameState = {
    balance: 1000,
    spinning: false,
    roundActive: false,
    chancesLeft: 0,
  };

  /* Helpers para buscar elementos com tipagem */
  function $<T extends HTMLElement>(selector: string) {
    return document.getElementById(selector) as T | null;
  }

  const balanceEl = $<HTMLDivElement>("balance");
  const betInput = $<HTMLInputElement>("betInput");
  const quickBet = $<HTMLSelectElement>("quickBet");
  const difficultyEl = $<HTMLSelectElement>("difficulty");
  const spinBtn = $<HTMLButtonElement>("spinBtn");
  const messageEl = $<HTMLDivElement>("message");
  const reelEls = [
    $<HTMLDivElement>("reel0"),
    $<HTMLDivElement>("reel1"),
    $<HTMLDivElement>("reel2"),
  ];
  const paytableEl = $<HTMLUListElement>("paytable");
  const diffHintEl = $<HTMLDivElement>("diffHint");
  const roundChancesEl = $<HTMLDivElement>("roundChances");

  /* Atualiza√ß√£o visual do saldo */
  function updateBalance(delta = 0) {
    state.balance = Math.max(0, Math.round(state.balance + delta));
    if (balanceEl) balanceEl.textContent = `R$ ${state.balance}`;
  }

  /* Mensagens ao usu√°rio com ajustes visuais */
  function showMessage(html: string, kind: "info" | "win" | "lose" = "info") {
    if (!messageEl) return;
    messageEl.innerHTML = html;
    messageEl.classList.remove("win-glow", "lose-tone");
    if (kind === "win") messageEl.classList.add("win-glow");
    if (kind === "lose") messageEl.classList.add("lose-tone");
  }

  /* Atualiza dica de dificuldade e paytable */
  function updateDifficultyHint() {
    const key = difficultyEl?.value as DifficultyLevel | undefined;
    if (diffHintEl && key) diffHintEl.textContent = DIFFICULTY_CONFIG[key].hint;
  }

  function populatePaytable(difficultyKey: DifficultyLevel) {
    if (!paytableEl) return;
    const config = DIFFICULTY_CONFIG[difficultyKey];
    paytableEl.innerHTML = "";
    const frag = document.createDocumentFragment();
    [...SYMBOLS]
      .sort((a, b) => b.multiplier - a.multiplier)
      .forEach((s) => {
        const li = document.createElement("li");
        li.className = "flex items-center justify-between";
        li.innerHTML = `<span class="flex items-center gap-2"><span class="text-2xl">${s.icon}</span><strong>${s.name}</strong></span><span class="text-sm">3x = x${(s.multiplier * config.payoutFactor).toFixed(1)}</span>`;
        frag.appendChild(li);
      });
    paytableEl.appendChild(frag);
  }

  /* Mostra quantas chances restam (acess√≠vel) */
  function updateRoundChancesDisplay() {
    if (!roundChancesEl) return;
    roundChancesEl.textContent = state.roundActive
      ? `Chances: ${state.chancesLeft}`
      : `Chances: ‚Äî`;
  }

  /* Sele√ß√£o ponderada sem criar arrays grandes */
  function weightedRandomSymbol(difficultyKey: DifficultyLevel): SymbolItem {
    const config = DIFFICULTY_CONFIG[difficultyKey];
    // Calcula peso cumulativo
    const weights = SYMBOLS.map((sym) => {
      const base = sym.frequency;
      const adjustment =
        sym.multiplier > 10 ? config.weightFactor : 1 / config.weightFactor;
      return Math.max(1, Math.round(base * adjustment));
    });
    const total = weights.reduce((a, b) => a + b, 0);
    let r = Math.floor(Math.random() * total);
    for (let i = 0; i < SYMBOLS.length; i++) {
      if (r < weights[i]) return SYMBOLS[i];
      r -= weights[i];
    }
    return SYMBOLS[SYMBOLS.length - 1];
  }

  /* Toca tons (opcional/defensivo) */
  function playToneSequence(sequence: number[] = [440, 660], duration = 0.12) {
    try {
      const ctx = new (window.AudioContext ||
        (window as any).webkitAudioContext)();
      let start = ctx.currentTime;
      sequence.forEach((freq, i) => {
        const o = ctx.createOscillator();
        const g = ctx.createGain();
        o.type = "sine";
        o.frequency.value = freq;
        g.gain.value = 0.02;
        o.connect(g);
        g.connect(ctx.destination);
        o.start(start + i * duration);
        o.stop(start + (i + 0.9) * duration);
      });
    } catch (e) {
      // ambiente sem √°udio: silencioso, sem erro
      // console.warn("√Åudio n√£o dispon√≠vel", e);
    }
  }

  /* Avalia resultado dos s√≠mbolos */
  function evaluateResult(
    symbols: SymbolItem[],
    bet: number,
    difficultyKey: DifficultyLevel
  ) {
    const config = DIFFICULTY_CONFIG[difficultyKey];
    const ids = symbols.map((s) => s.id);

    if (ids[0] === ids[1] && ids[1] === ids[2]) {
      const sym = symbols[0];
      const amount = Math.round(bet * sym.multiplier * config.payoutFactor);
      return { win: true, amount, kind: "three", symbol: sym } as const;
    }

    if (ids[0] === ids[1] || ids[1] === ids[2] || ids[0] === ids[2]) {
      const matchedId =
        ids[0] === ids[1] ? ids[0] : ids[1] === ids[2] ? ids[1] : ids[0];
      const sym = SYMBOLS.find((s) => s.id === matchedId) ?? null;
      return { win: false, amount: 0, kind: "two", symbol: sym } as const;
    }

    return { win: false, amount: 0, kind: "none", symbol: null } as const;
  }

  /* Anima os reels e resolve com s√≠mbolos finais */
  function spinReelsVisual(
    difficultyKey: DifficultyLevel
  ): Promise<SymbolItem[]> {
    const spinDurations = [1400, 2000, 2600];
    const promises = reelEls.map((el, idx) => {
      return new Promise<SymbolItem>((resolve) => {
        if (!el) {
          resolve(SYMBOLS[0]);
          return;
        }
        const endAt = Date.now() + spinDurations[idx];
        const tick = () => {
          if (Date.now() < endAt) {
            const randomSymbol =
              SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
            el.innerHTML = `<span class="symbol">${randomSymbol.icon}</span>`;
            setTimeout(tick, 70 + Math.random() * 80);
          } else {
            const finalSym = weightedRandomSymbol(difficultyKey);
            el.innerHTML = `<span class="symbol">${finalSym.icon}</span>`;
            resolve(finalSym);
          }
        };
        tick();
      });
    });
    return Promise.all(promises);
  }

  /* Finaliza rodada e reabilita controles */
  function endRound() {
    state.roundActive = false;
    state.chancesLeft = 0;
    updateRoundChancesDisplay();

    if (spinBtn) {
      spinBtn.disabled = false;
      spinBtn.classList.remove("opacity-80", "cursor-not-allowed");
    }
    [betInput, quickBet, difficultyEl].forEach((el) => {
      if (!el) return;
      el.disabled = false;
      el.classList.remove("opacity-50", "cursor-not-allowed");
    });
  }

  /* Inicializa reels com s√≠mbolos aleat√≥rios */
  function initReels() {
    reelEls.forEach((el) => {
      if (!el) return;
      const sym = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
      el.innerHTML = `<span class="symbol">${sym.icon}</span>`;
    });
  }

  /* Evento do bot√£o Girar */
  spinBtn?.addEventListener("click", async () => {
    if (state.spinning) return;
    if (!betInput?.value) return;

    const bet = Math.max(1, Math.floor(Number(betInput.value) || 0));
    if (!bet || bet <= 0) {
      showMessage("Insira uma aposta v√°lida (R$).", "lose");
      return;
    }

    // Iniciar nova rodada se necess√°rio
    if (!state.roundActive) {
      if (bet > state.balance) {
        showMessage("Saldo insuficiente para essa aposta.", "lose");
        return;
      }
      updateBalance(-bet);
      state.roundActive = true;
      state.chancesLeft = INITIAL_ROUND_CHANCES;
      updateRoundChancesDisplay();

      // bloquear controles de aposta/dificuldade durante a rodada
      if (betInput) {
        betInput.disabled = true;
        betInput.classList.add("opacity-50", "cursor-not-allowed");
      }
      if (quickBet) {
        quickBet.disabled = true;
        quickBet.classList.add("opacity-50", "cursor-not-allowed");
      }
      if (difficultyEl) {
        difficultyEl.disabled = true;
        difficultyEl.classList.add("opacity-50", "cursor-not-allowed");
      }

      showMessage(
        `Rodada iniciada ‚Äî voc√™ tem ${state.chancesLeft} chances para essa aposta. Boa sorte!`
      );
    }

    if (state.roundActive && state.chancesLeft <= 0) {
      showMessage("Sua rodada j√° terminou. Inicie uma nova rodada.", "info");
      endRound();
      return;
    }

    // Executa o giro
    state.spinning = true;
    spinBtn.disabled = true;
    spinBtn.classList.add("opacity-80", "cursor-not-allowed");
    showMessage("Girando... boa sorte!");

    playToneSequence([220, 330, 440], 0.06);

    const difficultyKey = (difficultyEl?.value as DifficultyLevel) ?? "normal";
    const finalSymbols = await spinReelsVisual(difficultyKey);

    const result = evaluateResult(finalSymbols, bet, difficultyKey);

    if (result.win) {
      updateBalance(result.amount);
      showMessage(
        `üéâ Parab√©ns voc√™ ganhou R$ ${result.amount} ‚Äî Super vit√≥ria! ü§ë`,
        "win"
      );
      playToneSequence([660, 880, 1100], 0.08);

      reelEls.forEach((el) => el?.parentElement?.classList.add("win-glow"));
      setTimeout(
        () =>
          reelEls.forEach((el) =>
            el?.parentElement?.classList.remove("win-glow")
          ),
        900
      );

      state.spinning = false;
      endRound();
      return;
    }

    // N√£o ganhou: decrementar chances
    state.chancesLeft = Math.max(0, state.chancesLeft - 1);
    updateRoundChancesDisplay();

    if (result.kind === "two") {
      const symName = result.symbol ? result.symbol.name : "o s√≠mbolo";
      if (state.chancesLeft > 0) {
        showMessage(
          `üòÉ Quase l√°! Voc√™ acertou dois ${symName}. Restam ${state.chancesLeft} chance(s). Tente novamente! ü§ó`,
          "info"
        );
      } else {
        showMessage(
          `üòû Quase l√° mas sem sorte ‚Äî voc√™ acertou dois ${symName} e acabou as chances. Tente outra rodada.`,
          "lose"
        );
      }
      playToneSequence([420, 300], 0.07);
    } else {
      if (state.chancesLeft > 0) {
        showMessage(
          `üòû Sem combina√ß√£o. Restam ${state.chancesLeft} chance(s) nessa rodada.`,
          "lose"
        );
      } else {
        showMessage(
          `üòû Sem combina√ß√£o e sem chances restantes. Rodada encerrada.`,
          "lose"
        );
      }
      playToneSequence([120], 0.12);
    }

    state.spinning = false;

    if (state.roundActive && state.chancesLeft > 0) {
      spinBtn.disabled = false;
      spinBtn.classList.remove("opacity-80", "cursor-not-allowed");
    } else if (state.chancesLeft <= 0) {
      endRound();
    }

    // Reset amig√°vel da demo quando saldo zerar
    if (state.balance <= 0) {
      spinBtn.disabled = true;
      showMessage(
        "Voc√™ ficou sem saldo ‚Äî redefinindo para R$1000 para a demo.",
        "lose"
      );
      setTimeout(() => {
        state.balance = 1000;
        updateBalance(0);
        spinBtn.disabled = false;
      }, 1500);
    }
  });

  /* Sincroniza quickBet -> input */
  quickBet?.addEventListener("change", () => {
    if (!betInput || !quickBet) return;
    betInput.value = quickBet.value;
  });

  difficultyEl?.addEventListener("change", () => {
    updateDifficultyHint();
    populatePaytable(difficultyEl.value as DifficultyLevel);
  });

  /* Inicializa√ß√£o */
  (function init() {
    initReels();
    updateBalance(0);
    updateDifficultyHint();
    populatePaytable("normal");
    updateRoundChancesDisplay();
    showMessage(
      "Bem-vindo! Defina sua aposta e dificuldade, depois pressione Girar. Boa sorte!"
    );
    betInput?.addEventListener("keydown", (e) => {
      if (e.key === "Enter") spinBtn?.click();
    });
  })();
</script>
